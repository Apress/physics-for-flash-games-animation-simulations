package{	import flash.display.Sprite;	import com.physicscodes.objects.Ball;	import com.physicscodes.objects.Wall;	import com.physicscodes.math.Vector2D;	import com.physicscodes.objects.Particle;			public class BouncingOffMultipleInclinedWalls2 extends Sprite{		public function BouncingOffMultipleInclinedWalls2():void{			init();		}		private function init():void{			// create the bouncing ball			var ball:Ball;			ball = new Ball(4,0x0000ff,10);			ball.pos2D = new Vector2D(200,90);			ball.velo2D=new Vector2D(0,0);			addChild(ball);				            // create the inclined walls - stored in an Array called walls			var walls:Array=new Array();						   // wall 1			var wall1:Wall=new Wall(new Vector2D(50,50),new Vector2D(550,50));            addChild(wall1);			walls.push(wall1);			// wall 2			var wall2:Wall=new Wall(new Vector2D(550,50),new Vector2D(550,400));						addChild(wall2);			walls.push(wall2);			// wall 3			var wall3:Wall=new Wall(new Vector2D(50,400),new Vector2D(550,400));			addChild(wall3);			walls.push(wall3);			// wall 4			var wall4:Wall=new Wall(new Vector2D(50,50),new Vector2D(50,400));			addChild(wall4);			walls.push(wall4);			// wall 5			var wall5:Wall=new Wall(new Vector2D(100,100),new Vector2D(200,120));			addChild(wall5);			walls.push(wall5); 			// wall 6			var wall6:Wall=new Wall(new Vector2D(350,170),new Vector2D(450,140));			addChild(wall6);			walls.push(wall6);			// wall 7			var wall7:Wall=new Wall(new Vector2D(130,200),new Vector2D(260,300));			addChild(wall7);			walls.push(wall7);			// wall 8			var wall8:Wall=new Wall(new Vector2D(370,310),new Vector2D(470,280));			addChild(wall8);			walls.push(wall8);						// initialize the side condition for tunnelling effect			for (var i:int=0; (i<walls.length); i++){				var wall:Wall = walls[i];							var wdir:Vector2D = wall.dir;			   		    	var ballp1:Vector2D = wall.p1.subtract(ball.pos2D);				var proj1:Number = ballp1.projection(wdir);                				var dist:Vector2D = ballp1.addScaled(wdir.unit(), proj1*(-1));   				if (dist.dotProduct(wall.normal) > 0){					wall.side = 1;				}				else{					wall.side = -1;				}			}			// trigger the bouncing			var bouncer:MultipleInclinedWallsBouncer2=new MultipleInclinedWallsBouncer2(ball,walls);			bouncer.startTime(10);		}	}}