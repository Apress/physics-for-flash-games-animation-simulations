package {	import com.physicscodes.math.Graph;	import com.physicscodes.math.Vector2D;	import com.physicscodes.motion.Forcer;	import com.physicscodes.motion.Forces;	import com.physicscodes.objects.Ball;			public class ElectricInteractor extends Forcer{				private var _orbiter:Ball;					private var _centers:Array;		private var _chargeOrbiter:Number;		private var _k:Number;		private var _graph:Graph;				private var _stageWidth:Number;		private var _stageHeight:Number;				public function ElectricInteractor(porbiter:Ball,pcenters:Array,pk:Number):void{			_orbiter = porbiter;			_centers = pcenters;			_chargeOrbiter = porbiter.charge;						_k = pk;			_stageWidth = _orbiter.stage.stageWidth;						_stageHeight = _orbiter.stage.stageHeight;							setupGraph();			super(porbiter);		}					override protected function calcForce():void{			var electric:Vector2D = Forces.zeroForce();			force = Forces.zeroForce();			for (var i:uint=0; i<_centers.length; i++){				var center:Ball=_centers[i];				var dist:Vector2D = _orbiter.pos2D.subtract(center.pos2D);				if (dist.lengthSquared > Math.pow(center.radius+_orbiter.radius,2)){					electric = Forces.electric(_k,center.charge,_chargeOrbiter,dist);							force = Forces.add([force, electric]);				}else{					recycleOrbiter();				}			}		}				override protected function moveObject():void{			super.moveObject();			plotGraph();					if (_orbiter.xpos < 0 || _orbiter.xpos > _stageWidth || _orbiter.ypos < 0 || _orbiter.ypos > _stageHeight){				recycleOrbiter();			}		}				private function recycleOrbiter():void{			_orbiter.color = Math.random()*0xffffff;			_orbiter.pos2D = new Vector2D(Math.random()*_stageWidth,Math.random()*_stageHeight);			_orbiter.velo2D = new Vector2D((Math.random()-0.5)*100,(Math.random()-0.5)*100);		}		private function setupGraph():void {			//_graph= new Graph(xmin,xmax,ymin,ymax,xorig,yorig,xwidth,ywidth);				_graph= new Graph(0,_stageWidth,0,_stageHeight,0,0,_stageWidth,_stageHeight);									_orbiter.stage.addChild(_graph);		}		private function plotGraph():void{			_graph.plot([_orbiter.xpos], [-_orbiter.ypos], _orbiter.color, false, true);				}					}}